00010000H ********
00020000T UTILITY TO SCAN PANVALET LIBRARIES FOR CHARACTER STRINGS - PANSCAN
00030000K AIDS UTILITY PANVALET PANSCAN PAN#8 SCAN SEARCH FIND STRING
00040000
00050000This entry is in UPPER and lower case text.  Please set your (A,a/A)
00060000switch to the (A,a) position for viewing.
00070000
00080000The PANSCAN utility performs the scanning/finding functions of the
00090000PAN#8 utility, with the following two differences: (1) PANSCAN uses
00100000READ ONLY access to the PANVALET library, and so can be used on
00110000production libraries (PAN#8 uses UPDATE access).  (2) PANSCAN allows
00120000generic member selection with 'wild-card' characters, in addition to
00130000the PAN#8 method of language selection.
00140000
00150000PANSCAN is written in PL/1 and uses the Panvalet Access Method (PAM),
00160000so it is somewhat slower to run than PAN#8, but since PANSCAN doesn't
00170000have a ++REP function, the library is secure from unauthorized
00180000updates.
00190000
00200000The following JCL is used to run PANSCAN:
00210000
00220000
00230000     //PANSCAN EXEC PGM=PANSCAN
00240000     //SYSPRINT DD  SYSOUT=*
00250000     //PANDD1   DD  DSN=PANVALET.LIBRARY,DISP=SHR
00260000     //SYSUT1   DD  UNIT=WORK,SPACE=(6160,(20,20))
00270000     //SYSIN    DD  *  commands via SYSIN
00280000     SELECT RX*
00290000     FIND 'ORDER-QTY'
00300000     FIND 'WHAT-ME-WORRY'
00310000     SELECT /COBOL
00320000     FIND 'JUNK-QTY'
00330000
00340000A PROC to run PANSCAN is in 'INTEL.PROCLIB' under the name PANSCAN.
00350000
00360000     //DOIT  EXEC  PANSCAN,LIB='PROD.NTL.PANLIB'
00370000     //SYSIN  DD   *
00380000     SELECT RX*
00390000     FIND 'ORDER-QTY'
00400000
00410000
00420000   DDNAMES USED:
00430000
00440000      SYSPRINT - OUTPUT print file containing listings
00450000
00460000      PANDD1   - INPUT; PANVALET library to scan
00470000
00480000      SYSUT1   - WORK FILE (FB,80,6160)
00490000
00500000      SYSIN    - INPUT; required parameter cards(start in col 1):
00510000
00520000         SELECT <member-mask> | * | /<language>
00530000         FIND 'string1'
00540000         FIND 'string2'
00550000         FIND 'string3'   (etc...up to 50 strings of 40 chars each).
00560000
00570000   WHERE: <member-mask> is 1-10 chars to match the member names to
00580000                        be selected.  '*' is a wild-card character.
00590000
00600000          *             wild-card character.
00610000
00620000          /<language>   selects by language type (i.e. /COBOL
00630000                        /ASMB  /PL/1  /JCL   /DATA )
00640000
00650000         'string'       is a set of characters to find in each member.
00660000                        There is a maximum of 50 find commands per
00670000                        SELECT statement.
00680000
00690000                        The first character of string is used as a
00700000                        delimiter character.  The string must end with
00710000                        the character the same as the first character.
00720000
00730000                        (e.g.:  / WHAT /     " WHAT "   ' WHAT '
00740000                         all 3 are the word 'WHAT' with a leading and
00750000                         trailing blank)
00760000
00770000AUTHOR:  Ken True
00780000$EOM
